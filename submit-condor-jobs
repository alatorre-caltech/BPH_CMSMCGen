#!/usr/bin/env python
"""
Script to submit MC jobs to the condor queue. Examples:

    $ ./submit-condor-jobs mu --events 150000 --jobs 1000 -f --pileup c2
    $ ./submit-condor-jobs -e 200000 -j 6000 JpsiKst --pileup c2
"""
from __future__ import print_function
import os, sys, re
import commands
from glob import glob
from os.path import getmtime

def processCmd(cmd, quiet=False):
    status, output = commands.getstatusoutput(cmd)
    if status != 0 and not quiet:
        print('Error in processing command:\n   ['+cmd+']')
        print('Output:\n   ['+output+'] \n')
    return output

def compileCMSSW(cmssw_loc):
    # Get the current working directory so we can change back after we finish
    # compiling
    cwd = os.getcwd()
    aux = raw_input('Do you want to compile CMSSW now? (y/n)\n')
    if 'y' in aux:
        print('Now compiling ' + cmssw_loc)
        cmd = 'cd ' + cmssw_loc
        cmd += '; source /cvmfs/cms.cern.ch/cmsset_default.sh'
        cmd += '; eval `scramv1 runtime -sh`'
        cmd += '; scram b -j12'
        try:
            os.system(cmd)
        finally:
            # Switch back to the current working directory
            os.chdir(cwd)
        return True
    else:
        return False

PROCESSES = {
    # 'mu':         'BP_Tag_B0_MuNuDmst_Hardbbbar_evtgen_ISGW2',
    # 'mu_softQCD': 'BP_Tag_B0_MuNuDmst_SoftQCDall_evtgen_ISGW2',
    # 'tau':        'BP_Tag_B0_TauNuDmst_Hardbbbar_evtgen_ISGW2',
    # 'Dstst':      'BPH_Tag-Bp_MuNuDstst_DmstPi_13TeV-pythia8_Hardbbbar_PTFilter5_0p0-evtgen_ISGW2',
    # 'KDst':       'BPH_Tag-Mu_Probe-B0_KDmst-pD0bar-kp_13TeV-pythia8_Hardbbbar_PTFilter5_0p0-evtgen_SVS',
    # 'JpsiKst':    'BPH_Tag-Probe_B0_JpsiKst-mumuKpi-kp_13TeV-pythia8_Hardbbbar_PTFilter5_0p0-evtgen_SVV',
    # 'JpsiKstFSR': 'BPH_Tag-Probe_B0_JpsiKst-mumuKpi-kp_13TeV-pythia8_Hardbbbar_PTFilter5_0p0-evtgenFSR_SVV',
    # 'mu_probe':   'BP_Probe_B0_MuNuDmst_Tag-B_MuNuDst_Hardbbbar_evtgen_ISGW2',
    # 'tau_probe':  'BP_Probe_B0_TauNuDmst_Tag-B_MuNuDst_Hardbbbar_evtgen_ISGW2',
    # 'mu_unb':     'Unbiased_B0_MuNuDmst_Hardbbbar_evtgen_ISGW2',
    # 'tau_unb':    'Unbiased_B0_TauNuDmst_Hardbbbar_evtgen_ISGW2',
    # 'DstKu':      'BParking_Tag_DstKu_KutoMu_SoftQCDnonD_scale5_TuneCP5',
    'Bd_DDs1':      'BParking_Tag_Bd_DDs1_SoftQCDnonD_scale5_TuneCP5',
    'Bu_DDs1':      'BParking_Tag_Bu_DDs1_SoftQCDnonD_scale5_TuneCP5',
    'B_DstDXX':     'BParking_Tag_B_DstDXX_SoftQCDnonD_scale5_TuneCP5',
    'B_DstX':       'BParking_Tag_B_DstX_SoftQCDnonD_scale5_TuneCP5',
    'JpsiKst':      'BParking_Bd_JpsiKst_SoftQCDnonD_scale5_TuneCP5_HELAMP',
    'Bu_D2stDs':    'BParking_Tag_Bu_D2stDs_SoftQCDnonD_scale5_TuneCP5',
}

if __name__ == "__main__":
    from os.path import join, expanduser
    import argparse

    parser = argparse.ArgumentParser("Submit MC jobs to condor")
    parser.add_argument ('tag', type=str, choices=PROCESSES.keys(), help='Process tag')
    parser.add_argument ('-e','--events', help='number of events per job', default=1000)
    parser.add_argument ('-j','--jobs', help='number of jobs', default=10)
    parser.add_argument ('--seed', help='starting seed', default=1, type=int)
    parser.add_argument ('--pileup', help='PU collisions to be generated', default=0, type=str)
    parser.add_argument ('--version', help='Process version', default='')
    parser.add_argument ('--cmssw-loc', help='CMSSW src loc', default=None)
    parser.add_argument ('--outdir', help='output directory ', default=None)
    parser.add_argument ('-f', '--force', action='store_true', help='Proceed even if the directory is already existing')
    parser.add_argument ('--not-nice', action='store_true', default=False, help='Run nice jobs')
    parser.add_argument ('--jobs-tag', help='Tag appended at the end of the output folder', default='')
    parser.add_argument ('--maxtime', help='Max wall run time [s=seconds, m=minutes, h=hours, d=days]', default='8h')
    parser.add_argument ('--memory', help='min virtual memory in MB', default='2500')
    parser.add_argument ('--disk', help='min disk space in KB', default='5000000')
    parser.add_argument ('--cpu', help='cpu threads', default='1')

    args = parser.parse_args()

    if args.tag not in PROCESSES:
        print("tag '%s' not found in processes!" % args.tag, file=sys.stderr)
        sys.exit(1)

    args.process = PROCESSES[args.tag]

    if args.cmssw_loc is None:
        if 'hep.caltech.edu' in os.uname()[1]:
            args.cmssw_loc = join(expanduser("~"),'RDstAnalysis/CMSSW_10_2_3/src')
        else:
            print('No default CMSSW location is set for', os.uname()[1],file=sys.stderr)
            exit()

    if args.outdir is None:
        if 'hep.caltech.edu' in os.uname()[1]:
            args.outdir = '/storage/af/group/rdst_analysis/BPhysics/data/cmsMC'
        else:
            print('No default output direcotry is set for', os.uname()[1],file=sys.stderr)
            exit()

    cmssw_version = re.search('/CMSSW_[0-9]+_[0-9]+_[0-9]+/src', args.cmssw_loc).group(0)[7:-4]
    version = cmssw_version.replace('_', '-')
    if args.version:
        version += '_' + args.version

    outdir = args.outdir+'/'+args.process+'_PU'+str(args.pileup)+'_'+version+'/jobs_MINIAOD'
    if args.jobs_tag:
        outdir += '_' + args.jobs_tag

    time_scale = {'s':1, 'm':60, 'h':60*60, 'd':60*60*24}
    maxRunTime = int(args.maxtime[:-1]) * time_scale[args.maxtime[-1]]

    mc_frag_dir = args.cmssw_loc+'/Configuration/GenProduction/python'
    if not os.path.exists(mc_frag_dir):
        os.makedirs(mc_frag_dir)

    mc_frag_name = args.process+'_cfi.py'
    print('Running process:', args.process)
    filename = join(mc_frag_dir,mc_frag_name)
    local_filename = join('Configuration/GenProduction/python/',mc_frag_name)
    if not os.path.exists(filename) or getmtime(local_filename) > getmtime(filename):
        if not os.path.exists(filename):
            print('Pre-existing MC fragment not found')
        else:
            print('Pre-existing MC fragment older than local copy.')
        print('Copying it from Configuration/GenProduction/python/')
        cmd = 'cp %s %s' % (local_filename,filename)
        print(cmd)
        os.system(cmd)
        compileCMSSW(args.cmssw_loc)
    else:
        print('--->> I hope you already compiled '+args.cmssw_loc)
        aux = raw_input('Have you? (y/n)\n')
        if 'n' in aux:
            compileCMSSW(args.cmssw_loc)

    if not os.path.exists(outdir):
        os.makedirs(outdir)
        os.makedirs(outdir+'/out/')
        os.makedirs(outdir+'/cfg/')
    elif not args.force:
        print('Output dir: "'+outdir+'" exists.')
        aux = raw_input('Continue anyway? (y/n)\n')
        if aux == 'n':
            exit()

    existing_files = glob(outdir + '/out_MINIAODSIM_*.root')
    n_max = None
    for f in existing_files:
        f = os.path.basename(f).replace('.root', '')
        f = f.replace('out_MINIAODSIM_', '')
        f = int(f)
        if n_max is None or f > n_max:
            n_max = f
    if not n_max is None and args.seed <= n_max:
        print('Max seed already present:', n_max)
        print('Starting seed set:', args.seed)
        aux = raw_input('Do you want to raise the starting seed to {}? (y/n)\n'.format(n_max+1))
        if aux == 'y':
            args.seed = n_max + 1

    print('Creating submission script')

    fsub = open('jobs.jdl', 'w')
    fsub.write('executable    = ' + os.environ['PWD'] + '/job1023_gen_v2.sh')
    fsub.write('\n')
    exec_args = str(args.events)+' '+str(args.seed)+' $(ProcId) '+args.process+' '+outdir+' '+args.cmssw_loc+' '+str(args.pileup)+' '+str(args.cpu)+' '+os.environ['HOME']
    fsub.write('arguments     = ' + exec_args)
    fsub.write('\n')
    fsub.write('output        = {}/out/job_$(ProcId)_$(ClusterId).out'.format(outdir))
    fsub.write('\n')
    fsub.write('stream_output = True\n')
    fsub.write('stream_error  = True\n')
    fsub.write('error         = {}/out/job_$(ProcId)_$(ClusterId).err'.format(outdir))
    fsub.write('\n')
    fsub.write('log           = {}/out/job_$(ProcId)_$(ClusterId).log'.format(outdir))
    fsub.write('\n')
    fsub.write('JobPrio = -1')
    fsub.write('\n')
    fsub.write('WHEN_TO_TRANSFER_OUTPUT = ON_EXIT_OR_EVICT')
    fsub.write('\n')
    fsub.write('+MaxRuntime   = '+str(maxRunTime))
    fsub.write('\n')
    if not args.not_nice:
        fsub.write('nice_user = True\n')
    if os.uname()[1] == 'login-2.hep.caltech.edu':
        fsub.write('+JobQueue = ' + ('"Normal"' if maxRunTime > 120*60 else '"Short"'))
        fsub.write('\n')
        fsub.write('+RunAsOwner = True')
        fsub.write('\n')
        fsub.write('+InteractiveUser = True')
        fsub.write('\n')
        fsub.write('+SingularityImage = "/cvmfs/singularity.opensciencegrid.org/cmssw/cms:rhel7"')
        fsub.write('\n')
        fsub.write('+SingularityBindCVMFS = True')
        fsub.write('\n')
        fsub.write('run_as_owner = True')
        fsub.write('\n')
        fsub.write('RequestDisk = ' + args.disk)
        fsub.write('\n')
        fsub.write('RequestMemory = ' + args.memory) #Static allocation
        fsub.write('\n')
        fsub.write('RequestCpus = ' + str(args.cpu))
        fsub.write('\n')
    fsub.write('x509userproxy = $ENV(X509_USER_PROXY)')
    fsub.write('\n')
    fsub.write('on_exit_remove = (ExitBySignal == False) && (ExitCode == 0)')
    fsub.write('\n')
    fsub.write('on_exit_hold = (ExitBySignal == True) || (ExitCode != 0)')   # Send the job to Held state on failure.
    fsub.write('\n')
    if args.not_nice:
        fsub.write('periodic_release =  (NumJobStarts < 2) && ((CurrentTime - EnteredCurrentStatus) > (60*10))')   # Periodically retry the jobs for 3 times with an interval of 10 minutes.
        fsub.write('\n')
    fsub.write('+PeriodicRemove = ((JobStatus =?= 2) && ((MemoryUsage =!= UNDEFINED && MemoryUsage > 2.5*RequestMemory)))')
    fsub.write('\n')
    fsub.write('max_retries    = 2')
    fsub.write('\n')
    fsub.write('requirements   = Machine =!= LastRemoteHost')
    fsub.write('\n')
    fsub.write('universe = vanilla')
    fsub.write('\n')
    fsub.write('queue '+str(args.jobs))
    fsub.write('\n')
    fsub.close()

    #Create tmp directory
    if not os.path.isdir('tmp_return'):
        os.system('mkdir tmp_return')
    os.system('mv jobs.jdl tmp_return/jobs.jdl')

    print('Submitting jobs...')
    cmd = 'cd tmp_return; condor_submit jobs.jdl'
    cmd += ' -batch-name ' + '_'.join(['gen', args.process, 'PU'+str(args.pileup), args.version])
    output = processCmd(cmd)
    print('Jobs submitted')
    os.system('mv tmp_return/jobs.jdl '+outdir+'/cfg/jobs.jdl')
    call = '"' + ' '.join(sys.argv)
    call += ' (starting seed: ' + str(args.seed) +')'
    call += '"'
    cmd = 'echo `date` ' + call + ' >> ' + outdir+'/cfg/call.log'
    os.system(cmd)
    os.system('cd ..')
